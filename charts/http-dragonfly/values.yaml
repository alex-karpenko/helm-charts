# Default values for http-dragonfly
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/alex-karpenko/http-dragonfly
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  healthCheck:
    port: 3000 # actually this port is for health checks only
    expose: true # expose it as service
  listeners: # these ports are for listeners
    - port: 8000
      name: default-listener-8080 # name is optional

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

autoScaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
  # targetCpuValue: 10m # mutually exclusive with targetCPUUtilizationPercentage
  targetMemoryUtilizationPercentage: 50
  # targetMemoryValue: 128Mi # mutually exclusive with targetMemoryUtilizationPercentage
  behavior: {}
  #   scaleDown:
  #     stabilizationWindowSeconds: 600
  #     policies:
  #     - type: Pods
  #       value: 1
  #       periodSeconds: 60


# Define pod's environment variables
podEnv: {}
#  ENV_NAME: some_value

# Load content of Secrets as environment variables
secrets: []
#  - http-dragonfly

# Mount Secrets as files
secretMounts: []
#  - name: http-dragonfly-tls
#    mountPath: /secrets/tls

# Mount ConfigMaps as files
configMapMounts: []
#  - name: http-dragonfly-ca
#    mountPath: /secrets/ca

# Create ConfigMaps from files in the specified folders and mount them
# One folder - one ConfigMap - one mount path
# This is convenient way to load files like CA certificates
# Folders should be in the chart directory (see aws-ca example) at the same level as templates folder
# WARNINGS:
#  * don't use this approach to store secrets like certificate keys
#  * size of ConfigMap resource is restricted to 1Mb by K8s
createConfigMaps: []
#  - folder: aws-ca
#    mountPath: /ca/aws-ca
#    name: http-dragonfly-aws-ca # optional, default is <deployment-full-name>-<folder-name>

# info or debug, anything else - warning
logLevel: warning
# Write logs in JSON format if true
logJson: false

# regex to restrict allowed environment variable to use in contexts
envMask: "^HTTP_ENV_[a-zA-Z0-9_]+$"

config: {}
#  listeners:
#    - timeout: 5s
#      "on": "*:8000"
#      strategy: failed_then_override
#      targets:
#        - url: http://some-service:9090/
#          id: a
#        - url: http://other-service.na-name:9091/
#          id: b
#      response:
#        override:
#          headers:
#          - add: x-reposonse-target-id
#            value: ${CTX_TARGET_ID}
