# ATTENTION! ATTENTION! ATTENTION! ATTENTION! ATTENTION! ATTENTION! ATTENTION!
#
# If you're going to deploy custom resources, services accounts and RBAC resources
# to the different namespaces (like controller to git-events-runner,
# but custom resources to several tenant namespaces), using serviceAccount,
# actionJobServiceAccounts, rbac section below,
# then you shouldn't use --namespace command line parameter
# but use this namespace value instead.
#
# Uncomment following two lines if you need multi-namespace installation,
# and change values according to yours needs.
#
# controllerNamespace: git-events-runner
# createNamespace: false

replicaCount: 1

image:
  repository: ghcr.io/alex-karpenko/git-events-runner/git-events-runner
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a controller service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the full name template
  name: ""

actionJobServiceAccounts:
  # Specifies whether service accounts for jobs should be created
  create: true
  # List of namespaces where triggers (and as result - Jobs) will be running
  # Namespace of the controller is always included in the list by default
  namespaces: []
  # namespaces: ["default", "project"]

  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service accounts
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the full name template
  # like {{ fullname }}-action-job
  name: ""

rbac:
  # Whether to create RBAC resources for controller and jobs
  create: true

  # RBAC settings for controller
  controller:
    # List of namespaces where access to secrets is permitted for the controller
    secretsNamespaces: []
    # secretsNamespaces: ["*"] # This is special case with access to all secrets in all namespaces
    # secretsNamespaces: ["default, "project"]

    # List of namespaces where controller is permitted to execute jobs
    # Usually this is the same list as `.Values.actionJobServiceAccounts.namespaces`
    jobsNamespaces: []
    # jobsNamespaces: ["*"] # This is special case with jobs permissions in all namespaces
    # jobsNamespaces: ["default, "project"]

  # RBAC settings to action jobs
  actionJobServiceAccounts:
    # Bind default jobs roles to Job's service accounts in namespaces from `.Values.actionJobServiceAccounts.namespaces`
    createRoleBindings: true

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Service resources to access  utility and webhooks ports
service:
  utility:
    # If type is defined then Service will be created
    # Usually you don't need service to access utility web port
    # type: ClusterIP
    port: 3000
  webhook:
    type: ClusterIP
    port: 8080

# Ingress uses webhook service only.
# Usually you don't need to expose utility web server to outside.
ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /alive
    port: utility
readinessProbe:
  httpGet:
    path: /ready
    port: utility

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

pdb:
  enabled: true
  # maxUnavailable: 1
  # minAvailable: 1

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mySecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# How to expose metrics to Prometheus
prometheus:
  podAnnotations: true # Prometheus annotations should be added to Pods
  podMonitor: # or create PodMonitor resource for prometheus-operator
    enabled: false
    interval: 30s

# Static (command line) options of the controller
controllerOptions:
  logLevel: info # or debug. Empty means warning level
  metricsPrefix: git_events_runner # this is default value
  otlp:
    enabled: false
    endpoint: http://localhost:4317
  leaderLease:
    duration: 30 # max duration of leader lease without renew
    grace: 5 # seconds before lock expires to renew it
  scheduleParallelism: 16 # max number of ScheduleTrigger tasks running in parallel
  webhooksParallelism: 16 # max number of WebhookTrigger tasks running in parallel
  secretsCacheTime: 60 # seconds
  # This folder is used to make git clones by controller within controller's container
  # So, `emptyDir` volume will be created
  sourceCloneFolder:
    mountPath: /tmp/git-events-runner
    volumeName: temp-repo-data

# Dynamic controllers config, controller reloads it on case of changes.
# There are all default values, so you can remove everything
# but redefine values you need to change only.
# See controllers documentation for details: https://alex-karpenko.github.io/git-events-runner/guides/config/
runtimeConfig:
  action:
    maxRunningJobs: 16
    jobWaitingTimeoutSeconds: 300
    defaultServiceAccount: '{{ include "git-events-runner.actionJobServiceAccountName" . }}'
    activeDeadlineSeconds: 3600
    ttlSecondsAfterFinished: 7200
    workdir:
      mountPath: /action_workdir
      volumeName: action-workdir
    containers:
      cloner:
        name: action-cloner
        image: ghcr.io/alex-karpenko/git-events-runner/gitrepo-cloner:{{ .Chart.AppVersion }}
      worker:
        name: action-worker
        image: ghcr.io/alex-karpenko/git-events-runner/action-worker:{{ .Chart.AppVersion }}
        variablesPrefix: ACTION_JOB_
  trigger:
    webhook:
      defaultAuthHeader: x-trigger-auth
